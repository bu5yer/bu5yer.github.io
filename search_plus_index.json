{"./":{"url":"./","title":"前言","keywords":"","body":"先在my_docs里面写文件,然后去SUMMARY.MD里面修改目录映射，最后运行start.sh Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2023-10-03 10:23:18 "},"my_docs/0x01_CTF/":{"url":"my_docs/0x01_CTF/","title":"0x01 CTF记录","keywords":"","body":"CTF文档 这一部分主要记录我在做CTF题中碰到的有意义的题目以及一些个人的经验总结。 Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-16 18:20:02 "},"my_docs/0x01_CTF/web/":{"url":"my_docs/0x01_CTF/web/","title":"web相关","keywords":"","body":"web部分介绍 本部分主要介绍我遇到的一些有意义的web相关的CTF题。 Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-16 18:21:26 "},"my_docs/0x01_CTF/web/bugku_sql0x1.html":{"url":"my_docs/0x01_CTF/web/bugku_sql0x1.html","title":"bugku sql0x1","keywords":"","body":"bugku中sql 0x1题目的记录 本题主要考察了sql注入的绕过和基本的源码审计能力。 1. 查看前端源码 可以从源码中看到提示信息，即进入/?pls_help 2. 查看源码 访问提示路径可得源码如下： \", \"query(\"SELECT * FROM users WHERE username='$user'\"); if ($result === false) die(\"pls dont break me\"); else $result = $result->fetchArray(); if ($result) { $split = explode('$', $result[\"password\"]); $password_hash = $split[0]; $salt = $split[1]; if ($password_hash === hash(\"sha256\", $pass.$salt)) $logged_in = true; else $err = \"Wrong password\"; } else $err = \"No such user\"; } ?> Hack.INI 9th - SQLi Welcome back admin! Have a flag: Login get some help --> 从代码中可以看出代码检测了user变量中的引号等敏感字符，接着在数据库中查找密码进行比对，如果正确就会输出flag。 3. 构造PoC 进一步分析源码，可以看出敏感字符检测中需要引号和空格同时存在才能被检出，因此可以考虑用/**/来代替空格，进而进行绕过。此外，可以查询一个不存在的user，联合上union select来查出我们给定的密码，进而完成登陆。 下面我们使用在线网站生成密码为test，盐值为123的sha256哈希值ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae，接着构造如下poc即可： 用户名为test01'/**/union/**/select/**/1,'ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae$123，密码为test。 4. 思考与扩展 空格绕过方式有哪些？ 怎么样才是正确的登陆逻辑？ 可以考虑将用户名和密码一起传进去查询 Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-17 14:00:08 "},"my_docs/0x01_CTF/web/bugku_nextGen2.html":{"url":"my_docs/0x01_CTF/web/bugku_nextGen2.html","title":"bugku nextGen2","keywords":"","body":"bugku 中的nextGen2记录 本题考查了file协议的原理和绕过 1. 发现入口 通过点击可以发现request的service参数可以发送一个url，考虑使用file协议读取本地文件 2. 尝试攻击 修改service值为file:///flag.txt，发现返回失败。 3. 进行绕过 file协议一般可以使用下面几种格式： file:/// file://127.0.0.1/ file://localhost/ file://127.0.1/ file://127.1/ file://2130706433/ 4. 思考 问题的本质是127.0.0.1的其他表示方法，有没有其他方案呢？ 八进制表示017700000001 十六进制表示0x7F000001/0x7f000001 注意，这两个方案在file中并不生效，但是可以在其他地方进行尝试 Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-17 17:02:00 "},"my_docs/0x01_CTF/web/bugku_Whois.html":{"url":"my_docs/0x01_CTF/web/bugku_Whois.html","title":"bugku Whois","keywords":"","body":"Bugku中Whois的记录 本题主要考察linux中的命令截断 1. 查看源码 在网页源码中发现query.php，访问可以发现如下源码： Whois 2. PoC构造 从上面的源码中可以发现，可以通过构造host和query参数来实现命令执行的效果。问题的关键在于whois命令的截断，这里可以考虑使用换行。 因此可以构造如下PoC: /query.php?host=whois.verisign-grs.com%0a&query=ls 3. 思考 其他的命令截断方案 可以考虑使用管道 Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-17 17:39:50 "},"my_docs/0x01_CTF/experience/":{"url":"my_docs/0x01_CTF/experience/","title":"个人经验","keywords":"","body":"经验 本部分记录一些CTF相关的经验 Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-16 18:25:38 "},"my_docs/0x01_CTF/experience/graphql_injection.html":{"url":"my_docs/0x01_CTF/experience/graphql_injection.html","title":"Graphql injection","keywords":"","body":"graphql攻击记录 今天初步了解到graphql攻击，这里简单进行记录。 graphql是相对于restful的另一种接口模式，旨在向一个接口传递不同的数据来实现不同的功能。该场景的一个主要特征就是url路径中出现graphql，在实际测试中可以尝试下面的路径： /graphql /graphql/console /graphql.php /graphiql /graphiql.php /api/graphql /***ql /graphql_playground 针对该场景的主要攻击方式是使用内省查询，看看是否暴露了相关接口，并查看各个接口是否做了鉴权操作，尝试使用敏感接口，bugku中的simple web app题就是这样的思路。内省主要是在graphql接口post下面的信息： {\"query\":\"\\n query IntrospectionQuery {\\n __schema {\\n \\n queryType { name }\\n mutationType { name }\\n subscriptionType { name }\\n types {\\n ...FullType\\n }\\n directives {\\n name\\n description\\n \\n locations\\n args {\\n ...InputValue\\n }\\n }\\n }\\n }\\n\\n fragment FullType on __Type {\\n kind\\n name\\n description\\n \\n fields(includeDeprecated: true) {\\n name\\n description\\n args {\\n ...InputValue\\n }\\n type {\\n ...TypeRef\\n }\\n isDeprecated\\n deprecationReason\\n }\\n inputFields {\\n ...InputValue\\n }\\n interfaces {\\n ...TypeRef\\n }\\n enumValues(includeDeprecated: true) {\\n name\\n description\\n isDeprecated\\n deprecationReason\\n }\\n possibleTypes {\\n ...TypeRef\\n }\\n }\\n\\n fragment InputValue on __InputValue {\\n name\\n description\\n type { ...TypeRef }\\n defaultValue\\n \\n \\n }\\n\\n fragment TypeRef on __Type {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n }\\n }\\n }\\n }\\n }\\n }\\n }\\n }\\n \",\"variables\":{},\"operationName\":\"IntrospectionQuery\"} 内省的结果可能很多很杂，可以考虑使用Altair Graphql Client插件来查看。在使用该插件只需要在配置好header之后发送query键里面的值即可。 Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-19 17:01:04 "},"my_docs/0x01_CTF/experience/file_upload.html":{"url":"my_docs/0x01_CTF/experience/file_upload.html","title":"文件上传","keywords":"","body":"文件上传漏洞记录 本节主要记录文件上传的利用方式和绕过姿势 一、文件上传利用方式 攻击者如果发现可以文件上传点，就可以尝试上传类如一句话密码的木马来执行任意命令，并使用远控工具来拿到权限。 二、文件上传绕过方式 把文件伪装成图片 制作图片马 在脚本前面GIF89a图片头 Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-21 14:19:02 "},"my_docs/0x02_Pentest/":{"url":"my_docs/0x02_Pentest/","title":"0x02 渗透测试","keywords":"","body":"渗透测试 本部分记录了渗透测试相关的技巧和实战内容 Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-22 16:55:12 "},"my_docs/0x02_Pentest/experience/":{"url":"my_docs/0x02_Pentest/experience/","title":"经验记录","keywords":"","body":"经验记录 本部分记录了渗透测试过程中涉及的各个环节的思路和方法 Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-22 17:01:46 "},"my_docs/0x02_Pentest/experience/collect_info.html":{"url":"my_docs/0x02_Pentest/experience/collect_info.html","title":"一、信息收集","keywords":"","body":"信息收集 信息收集是渗透测试的第一步，也是最重要的一步。在这一步骤中，我们要尽可能多的收集目标的资产信息。下面我们将详细的描述信息收集的过程，具体的描述将围绕收集对象和收集方案两个维度展开。 信息收集的对象包括目标的顶级域名、子域名、所有IP和开放的端口和服务。此外，需要着重关注对象的web服务，app服务和小程序服务。在完成上述信息收集时，我们要尽可能的去识别每一个服务的指纹，做到对症下药。 1. 获得初始信息 在确定目标时，我们至少会有目标的名称。此时可以直接在搜索引擎找到目标的官网，进而找到第一个顶级域名。接着可以通过查询该域名的whois信息找到注册人等信息。 2. 反查其他主域名 whois查询 在上一步的whois查询中，一般可以找到注册人相关的信息，尤其是注册人的邮箱，那么接下来可以使用邮箱反查域名、注册人反查域名和电话反查域名服务来查找其他域名。 ICP备案查询 然而由于很多域名的whois信息都是第三方机构的，不能直接关联到该域名，因此上述方案有时并不能生效。此时可以考虑通过ICP备案信息网站（ICP备案管理系统和站长之家ICP）来查询目标对象的所有域名。需要注意的是，由于国外的网站并不需要进行备案，因此上述方案只针对国内域名有效。 企业关系查询 除了上述两种方案，还可以考虑通过天眼查、爱企查和企查查等平台来查询目标的下属单位和子公司的域名信息。 官网首页查询 官网首页往往会列出其相关单位的信息，并给出这些单位的官网。此时可以依靠这些内容来进一步检索相关域名。 3. 检索子域名 证书查询 对于使用了https协议的网站，其TLS证书往往会被用于所有的子域名，因此可以通过下面这些证书展示网站来收集子域名： crt.sh censys sslmate 推荐使用前两个，第三个需要登陆，并且限制使用次数。 在线网站查询 除了上述方案，还有一些在线网站可以辅助进行子域名的查询： 查询网 站长之家子域名查询——需要会员 DnsDumpster 不推荐 自动化工具查询 可以综合使用OneForAll、subfinder和Layer子域名挖掘机工具来实现子域名的查找。 4. IP查找 DNS查找 最直接的IP查找方式就是通过上述域名的DNS记录来获得对应的IP。但是由于一些厂商会配置CDN，因此需要考虑对CDN进行绕过，进而获取真实IP。 CDN检测 使用超级ping工具，例如站长之家超级PING来从多地ping同一个域名，如果返回不同的IP，那该域名大概率就是使用了CDN。 CDN绕过 可以考虑对子域名进行ping检测，有时子域名不会配置CDN；也可以使用国外主机来Ping，大多数目标不会对国外客户配置CDN服务，可以通过https://get-site-ip.com/进行查询。 IP段检索 使用官方IP段分配网址查询可能的IP范围。 C段扫描 可以使用nmap,msscan和fscan等工具进行扫描。 5. 旁站扫描 可以使用IP反查域名工具来检索旁站，也可以使用各类空间测绘工具来查找。 6. 其他信息 通过天眼查、微信和应用商店查找目标的小程序，APP和PC软件。 7. 指纹识别 在收集完上述信息之后，可以对各个服务的指纹进行识别，进而更好的发现漏洞。下面我们将介绍一些指纹识别的方法。 在线识别 使用360的数字观星或者Tide的潮汐。 工具 Ehole，whatweb等工具 浏览器插件 首推wappalyzer 8. 备注 在信息收集的过程中要善用google hacker以及各类空间测绘工具。常见的空间测绘工具如下： fofa zoomeye quake hunter shodan Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-11-08 23:38:11 "},"my_docs/0x02_Pentest/real_attack/":{"url":"my_docs/0x02_Pentest/real_attack/","title":"实战记录","keywords":"","body":"攻击记录 本部分记录了我对各个站点的攻击姿势 Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-22 16:53:54 "},"my_docs/test.html":{"url":"my_docs/test.html","title":"测试","keywords":"","body":"fhsdfhdsj Copyright © bu5yer 2023 all right reserved，powered by Gitbook该文章修订时间： 2024-07-14 11:43:22 "}}